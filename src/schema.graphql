# import Post from "./generated/prisma.graphql"

type Query {
  me: User
  users(
    where: UserWhereInput
    orderBy: UserOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [User]!
  posts(
    where: PostWhereInput
    orderBy: PostOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Post]!
  entries(
    where: EntryWhereInput
    orderBy: EntryOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Entry]!
  user(where: UserWhereUniqueInput!): User
  post(where: PostWhereUniqueInput!): Post
  entry(where: EntryWhereUniqueInput!): Entry
  usersConnection(
    where: UserWhereInput
    orderBy: UserOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): UserConnection!
  postsConnection(
    where: PostWhereInput
    orderBy: PostOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): PostConnection!
  entriesConnection(
    where: EntryWhereInput
    orderBy: EntryOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): EntryConnection!
}

type Mutation {
  signup(email: String!, password: String!, name: String!): AuthPayload!
  login(email: String!, password: String!): AuthPayload!

  createPost(data: PostCreateInput!): Post!
  deletePost(where: PostWhereUniqueInput!): Post

  createEntry(data: EntryCreateInput!): Entry!
}

type AuthPayload {
  token: String!
  user: User!
}

type User {
  # don't show password!
  id: ID!
  email: String!
  name: String!
  entries: [Entry!]!
}
